# Generated by Django 5.0.2 on 2025-05-31 05:37

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('trueAlign', '0003_usersession_auto_logout_enabled_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EscalationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], max_length=20)),
                ('issue_type', models.CharField(blank=True, choices=[('Hardware Issue', 'Hardware Issue'), ('Software Issue', 'Software Issue'), ('Network Issue', 'Network Issue'), ('Internet Issue', 'Internet Issue'), ('Application Issue', 'Application Issue'), ('HR Related Issue', 'HR Related Issue'), ('Access Management', 'Access Management'), ('Security Incident', 'Security Incident'), ('Service Request', 'Service Request')], max_length=50)),
                ('threshold_hours', models.PositiveIntegerField(help_text='Hours after which to escalate')),
                ('escalate_to_group', models.CharField(choices=[('HR', 'HR'), ('Admin', 'Admin'), ('IT Support', 'IT Support'), ('Management', 'Management')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TicketFieldChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=50)),
                ('old_value', models.TextField(blank=True)),
                ('new_value', models.TextField(blank=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TicketTagging',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagged_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='statuslog',
            options={'ordering': ['-changed_at']},
        ),
        migrations.AlterModelOptions(
            name='support',
            options={'ordering': ['-created_at'], 'permissions': [('can_escalate_ticket', 'Can escalate tickets'), ('can_reopen_ticket', 'Can reopen tickets'), ('can_view_internal_comments', 'Can view internal comments'), ('can_manage_sla', 'Can manage SLA settings')], 'verbose_name': 'Support Ticket', 'verbose_name_plural': 'Support Tickets'},
        ),
        migrations.AlterModelOptions(
            name='ticketattachment',
            options={'ordering': ['-uploaded_at']},
        ),
        migrations.AddField(
            model_name='statuslog',
            name='duration_in_status',
            field=models.DurationField(blank=True, help_text='Time spent in previous status', null=True),
        ),
        migrations.AddField(
            model_name='support',
            name='deleted_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='support',
            name='deleted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_tickets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='support',
            name='escalated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalated_tickets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='support',
            name='first_response_at',
            field=models.DateTimeField(blank=True, help_text='When first response was provided', null=True),
        ),
        migrations.AddField(
            model_name='support',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='support',
            name='last_escalated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='support',
            name='last_reopened_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reopened_tickets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='support',
            name='reopen_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='support',
            name='reopened_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='support',
            name='sla_paused_at',
            field=models.DateTimeField(blank=True, help_text='When SLA was paused', null=True),
        ),
        migrations.AddField(
            model_name='support',
            name='sla_paused_duration',
            field=models.DurationField(default=datetime.timedelta(0), help_text='Total time SLA was paused'),
        ),
        migrations.AddField(
            model_name='ticketactivity',
            name='is_system_generated',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='ticketattachment',
            name='comment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='trueAlign.ticketcomment'),
        ),





        migrations.AddField(
            model_name='ticketcomment',
            name='is_first_response',
            field=models.BooleanField(default=False, help_text='Whether this is the first staff response'),
        ),

        migrations.AlterField(
            model_name='statuslog',
            name='new_status',
            field=models.CharField(choices=[('New', 'New'), ('Open', 'Open'), ('In Progress', 'In Progress'), ('Pending User Response', 'Pending User Response'), ('Pending Third Party', 'Pending Third Party'), ('On Hold', 'On Hold'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Reopened', 'Reopened')], max_length=30),
        ),
        migrations.AlterField(
            model_name='support',
            name='assigned_group',
            field=models.CharField(blank=True, choices=[('HR', 'HR'), ('Admin', 'Admin'), ('IT Support', 'IT Support'), ('Management', 'Management')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='support',
            name='sla_status',
            field=models.CharField(blank=True, choices=[('Within SLA', 'Within SLA'), ('Breached', 'Breached'), ('Paused', 'Paused')], help_text='Status of SLA compliance', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='support',
            name='status',
            field=models.CharField(choices=[('New', 'New'), ('Open', 'Open'), ('In Progress', 'In Progress'), ('Pending User Response', 'Pending User Response'), ('Pending Third Party', 'Pending Third Party'), ('On Hold', 'On Hold'), ('Resolved', 'Resolved'), ('Closed', 'Closed'), ('Reopened', 'Reopened')], default='New', max_length=30),
        ),
        migrations.AlterField(
            model_name='ticketactivity',
            name='action',
            field=models.CharField(choices=[('CREATED', 'Created'), ('UPDATED', 'Updated'), ('ASSIGNED', 'Assigned'), ('COMMENTED', 'Commented'), ('REOPENED', 'Reopened'), ('ESCALATED', 'Escalated'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed'), ('DELETED', 'Deleted'), ('RESTORED', 'Restored'), ('SLA_BREACHED', 'SLA Breached'), ('PRIORITY_CHANGED', 'Priority Changed')], max_length=20),
        ),
        migrations.AlterField(
            model_name='ticketactivity',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='trueAlign.support'),
        ),
        migrations.AlterField(
            model_name='ticketattachment',
            name='file',
            field=models.FileField(upload_to='ticket_attachments/%Y/%m/%d/'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['assigned_group'], name='trueAlign_s_assigne_10f959_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['is_deleted'], name='trueAlign_s_is_dele_5729e8_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['sla_target_date'], name='trueAlign_s_sla_tar_b9cf8d_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['escalation_level'], name='trueAlign_s_escalat_119363_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketactivity',
            index=models.Index(fields=['ticket', 'timestamp'], name='trueAlign_t_ticket__6b24f9_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketactivity',
            index=models.Index(fields=['action'], name='trueAlign_t_action_0acee0_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketattachment',
            index=models.Index(fields=['ticket', 'uploaded_at'], name='trueAlign_t_ticket__802cd4_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketcomment',
            index=models.Index(fields=['ticket', 'created_at'], name='trueAlign_t_ticket__be90d9_idx'),
        ),
        migrations.AddIndex(
            model_name='ticketcomment',
            index=models.Index(fields=['is_internal'], name='trueAlign_t_is_inte_71c670_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='escalationrule',
            unique_together={('priority', 'issue_type')},
        ),
        migrations.AddField(
            model_name='ticketfieldchange',
            name='changed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticketfieldchange',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_changes', to='trueAlign.support'),
        ),
        migrations.AddField(
            model_name='tickettagging',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_tickets', to='trueAlign.tickettag'),
        ),
        migrations.AddField(
            model_name='tickettagging',
            name='tagged_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tickettagging',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_tags', to='trueAlign.support'),
        ),
        migrations.AlterUniqueTogether(
            name='tickettagging',
            unique_together={('ticket', 'tag')},
        ),
    ]
