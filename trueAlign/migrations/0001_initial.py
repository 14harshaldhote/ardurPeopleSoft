# Generated by Django 4.2.21 on 2025-05-21 05:25

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import trueAlign.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appraisal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('overview', models.TextField(blank=True)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('manager_review', 'Manager Review'), ('hr_review', 'HR Review'), ('finance_review', 'Finance Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_appraisals', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appraisals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('account_number', models.CharField(max_length=50, unique=True)),
                ('bank_name', models.CharField(max_length=255)),
                ('branch', models.CharField(max_length=255)),
                ('ifsc_code', models.CharField(max_length=20)),
                ('current_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChartOfAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('account_type', models.CharField(choices=[('asset', 'Asset'), ('liability', 'Liability'), ('equity', 'Equity'), ('income', 'Income'), ('expense', 'Expense')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='trueAlign.chartofaccount')),
            ],
        ),
        migrations.CreateModel(
            name='ChatGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DirectMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('participants', models.ManyToManyField(related_name='direct_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FeatureUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_name', models.CharField(max_length=100)),
                ('usage_count', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GameIcon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('symbol', models.CharField(max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_icons', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('recurring_yearly', models.BooleanField(default=True, help_text='If True, this holiday occurs on the same date every year')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Holiday',
                'verbose_name_plural': 'Holidays',
            },
        ),
        migrations.CreateModel(
            name='LeaveType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_paid', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=True)),
                ('requires_documentation', models.BooleanField(default=False)),
                ('count_weekends', models.BooleanField(default=False)),
                ('can_be_half_day', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('file', 'File Attachment'), ('system', 'System Message')], default='text', max_length=20)),
                ('file_attachment', models.FileField(blank=True, null=True, upload_to='chat_files/%Y/%m/%d/')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('direct_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='trueAlign.directmessage')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='trueAlign.chatgroup')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['sent_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('deadline', models.DateField()),
                ('status', models.CharField(choices=[('Completed', 'Completed'), ('In Progress', 'In Progress'), ('Pending', 'Pending'), ('On Hold', 'On Hold')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('total_value', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('delivery_format', models.CharField(default='CSV', max_length=50)),
                ('clients', models.ManyToManyField(limit_choices_to={'groups__name': 'Client'}, related_name='projects_as_client', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShiftMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('shift_duration', models.DecimalField(decimal_places=2, default=8.0, max_digits=5)),
                ('break_duration', models.DurationField(default=datetime.timedelta(seconds=1800))),
                ('grace_period', models.DurationField(default=datetime.timedelta(seconds=900))),
                ('work_days', models.CharField(choices=[('Weekdays', 'Monday to Friday'), ('All Days', 'Monday to Saturday'), ('Custom', 'Custom Days')], default='Weekdays', max_length=20)),
                ('custom_work_days', models.CharField(blank=True, help_text='Comma-separated day names (Monday,Tuesday,etc.)', max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Shift',
                'verbose_name_plural': 'Shifts',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('vendor', models.CharField(max_length=255)),
                ('subscription_type', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('frequency', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('start_date', models.DateField()),
                ('next_payment_date', models.DateField()),
                ('auto_renew', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='active', max_length=20)),
                ('alert_days', models.IntegerField(default=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Support',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('issue_type', models.CharField(choices=[('Hardware Issue', 'Hardware Issue'), ('Software Issue', 'Software Issue'), ('Network Issue', 'Network Issue'), ('Internet Issue', 'Internet Issue'), ('Application Issue', 'Application Issue'), ('HR Related Issue', 'HR Related Issue'), ('Access Management', 'Access Management'), ('Security Incident', 'Security Incident'), ('Service Request', 'Service Request')], max_length=50)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('New', 'New'), ('Open', 'Open'), ('In Progress', 'In Progress'), ('Pending User Response', 'Pending User Response'), ('Pending Third Party', 'Pending Third Party'), ('On Hold', 'On Hold'), ('Resolved', 'Resolved'), ('Closed', 'Closed')], default='New', max_length=30)),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], default='Medium', max_length=20)),
                ('assigned_group', models.CharField(blank=True, choices=[('HR', 'HR'), ('Admin', 'Admin')], max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('asset_id', models.CharField(blank=True, help_text='Related hardware/software asset ID', max_length=50)),
                ('sla_breach', models.BooleanField(default=False)),
                ('sla_target_date', models.DateTimeField(blank=True, help_text='Target date for SLA compliance', null=True)),
                ('sla_status', models.CharField(blank=True, choices=[('Within SLA', 'Within SLA'), ('Breached', 'Breached')], help_text='Status of SLA compliance', max_length=20, null=True)),
                ('resolution_summary', models.TextField(blank=True)),
                ('resolution_time', models.DurationField(blank=True, null=True)),
                ('response_time', models.DurationField(blank=True, help_text='Time taken for first response', null=True)),
                ('time_to_close', models.DurationField(blank=True, help_text='Total time from creation to closure', null=True)),
                ('escalation_level', models.PositiveSmallIntegerField(default=0, help_text='Current escalation level of the ticket')),
                ('satisfaction_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('feedback', models.TextField(blank=True)),
                ('assigned_to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('parent_ticket', models.ForeignKey(blank=True, help_text='Parent ticket for related issues', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_tickets', to='trueAlign.support')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Support Ticket',
                'verbose_name_plural': 'Support Tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_message', models.TextField()),
                ('error_time', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SystemUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peak_time_start', models.DateTimeField()),
                ('peak_time_end', models.DateTimeField()),
                ('active_users_count', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucher_number', models.CharField(max_length=50, unique=True)),
                ('type', models.CharField(choices=[('payment', 'Payment'), ('receipt', 'Receipt'), ('journal', 'Journal')], max_length=20)),
                ('date', models.DateField()),
                ('reference_no', models.CharField(blank=True, max_length=100, null=True)),
                ('party_name', models.CharField(max_length=255)),
                ('purpose', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Department Head Approval'), ('pending_finance', 'Pending Finance Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('posted', 'Posted to Accounts')], default='draft', max_length=25)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='vouchers/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_vouchers', to=settings.AUTH_USER_MODEL)),
                ('department_approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dept_approved_vouchers', to=settings.AUTH_USER_MODEL)),
                ('finance_approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='finance_approved_vouchers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VoucherDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('credit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('description', models.TextField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trueAlign.chartofaccount')),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='trueAlign.voucher')),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('login_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('working_hours', models.DurationField(blank=True, null=True)),
                ('idle_time', models.DurationField(default=datetime.timedelta(0))),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('session_duration', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLeaveBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('allocated', models.DecimalField(decimal_places=1, max_digits=5)),
                ('used', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('carried_forward', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('additional', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('leave_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trueAlign.leavetype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_balances', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dob', models.DateField(blank=True, null=True, validators=[trueAlign.models.validate_future_date], verbose_name='Date of Birth')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], help_text='Select blood group', max_length=10, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Prefer not to say', 'Prefer not to say')], max_length=20, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed'), ('separated', 'Separated'), ('other', 'Other')], max_length=20, null=True)),
                ('contact_number_primary', models.CharField(blank=True, help_text='Primary contact number with country code', max_length=15, null=True)),
                ('personal_email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('company_email', models.EmailField(blank=True, help_text='Official company email', max_length=254, null=True, unique=True)),
                ('current_address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('current_address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('current_city', models.CharField(blank=True, max_length=100, null=True)),
                ('current_state', models.CharField(blank=True, max_length=100, null=True)),
                ('current_postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('current_country', models.CharField(blank=True, max_length=100, null=True)),
                ('permanent_address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('permanent_address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('permanent_city', models.CharField(blank=True, max_length=100, null=True)),
                ('permanent_state', models.CharField(blank=True, max_length=100, null=True)),
                ('permanent_postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('permanent_country', models.CharField(blank=True, max_length=100, null=True)),
                ('is_current_same_as_permanent', models.BooleanField(default=False, help_text='Is current address same as permanent address?')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('secondary_emergency_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('secondary_emergency_contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('secondary_emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('employee_type', models.CharField(blank=True, choices=[('full_time', 'Full-Time Employee'), ('part_time', 'Part-Time Employee'), ('contract', 'Contract Employee'), ('intern', 'Intern'), ('consultant', 'Consultant'), ('probationary', 'Probationary Employee'), ('remote', 'Remote Worker')], max_length=20, null=True)),
                ('hire_date', models.DateField(blank=True, help_text='Date when offer was accepted', null=True)),
                ('start_date', models.DateField(blank=True, help_text='First day of work', null=True)),
                ('probation_end_date', models.DateField(blank=True, help_text='Date when probation period ends', null=True)),
                ('notice_period_days', models.PositiveIntegerField(default=30, help_text='Notice period in days')),
                ('job_description', models.TextField(blank=True, null=True)),
                ('work_location', models.CharField(blank=True, max_length=100, null=True)),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('terminated', 'Terminated'), ('resigned', 'Resigned'), ('suspended', 'Suspended'), ('absconding', 'Absconding'), ('probation', 'Probation'), ('notice_period', 'Notice Period'), ('sabbatical', 'Sabbatical'), ('long_leave', 'Long Leave')], db_index=True, default='probation', max_length=50)),
                ('exit_date', models.DateField(blank=True, help_text='Last working day', null=True)),
                ('exit_reason', models.TextField(blank=True, help_text='Reason for leaving the company', null=True)),
                ('rehire_eligibility', models.BooleanField(blank=True, help_text='Eligible for rehire', null=True)),
                ('salary_currency', models.CharField(default='INR', help_text='Currency code (e.g., INR, USD)', max_length=3)),
                ('base_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('salary_frequency', models.CharField(choices=[('monthly', 'Monthly'), ('bi_weekly', 'Bi-Weekly'), ('weekly', 'Weekly')], default='monthly', max_length=20)),
                ('pan_number', models.CharField(blank=True, max_length=10, null=True, validators=[trueAlign.models.validate_pan], verbose_name='PAN Number')),
                ('aadhar_number', models.CharField(blank=True, max_length=12, null=True, validators=[trueAlign.models.validate_aadhar], verbose_name='Aadhar Number')),
                ('passport_number', models.CharField(blank=True, max_length=20, null=True)),
                ('passport_expiry', models.DateField(blank=True, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_account_number', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_ifsc', models.CharField(blank=True, max_length=11, null=True)),
                ('previous_company', models.CharField(blank=True, max_length=255, null=True)),
                ('previous_position', models.CharField(blank=True, max_length=100, null=True)),
                ('previous_experience_years', models.PositiveIntegerField(blank=True, null=True)),
                ('onboarding_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_status_change', models.DateTimeField(blank=True, null=True)),
                ('skills', models.TextField(blank=True, help_text='Comma-separated list of skills', null=True)),
                ('confidential_notes', models.TextField(blank=True, help_text='Confidential HR notes (visible only to HR)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('onboarded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onboarded_users', to=settings.AUTH_USER_MODEL)),
                ('reporting_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direct_reports', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Detail',
                'verbose_name_plural': 'User Details',
                'permissions': [('view_confidential_notes', 'Can view confidential HR notes'), ('view_salary_information', 'Can view salary information'), ('export_employee_data', 'Can export employee data'), ('manage_employee_status', 'Can change employee status')],
            },
        ),
        migrations.CreateModel(
            name='UserActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('create', 'User Created'), ('update', 'User Updated'), ('status_change', 'Status Changed'), ('role_change', 'Role Changed'), ('deactivate', 'User Deactivated'), ('activate', 'User Activated'), ('password_reset', 'Password Reset')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(blank=True, null=True)),
                ('action_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_actions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Timesheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start_date', models.DateField()),
                ('task_name', models.CharField(max_length=255)),
                ('task_description', models.TextField(help_text='Detailed description of work performed')),
                ('hours', models.FloatField()),
                ('adjusted_hours', models.FloatField(blank=True, help_text='Hours adjusted by manager during review', null=True)),
                ('approval_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Partially_Approved', 'Partially Approved'), ('Rejected', 'Rejected'), ('Clarification_Requested', 'Clarification Requested')], default='Pending', max_length=25)),
                ('rejection_reason', models.CharField(blank=True, choices=[('Insufficient_Detail', 'Insufficient Detail'), ('Hours_Discrepancy', 'Hours Discrepancy'), ('Wrong_Project', 'Wrong Project Allocation'), ('Incomplete_Documentation', 'Incomplete Documentation'), ('Other', 'Other')], max_length=30, null=True)),
                ('manager_comments', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('original_submission_id', models.IntegerField(blank=True, help_text='ID of original submission if this is a resubmission', null=True)),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number of this timesheet entry')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timesheets', to='trueAlign.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timesheets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-week_start_date', '-version'],
                'permissions': [('approve_timesheet', 'Can approve or reject timesheets'), ('view_team_timesheets', 'Can view timesheets for team members')],
            },
        ),
        migrations.CreateModel(
            name='TicTacToeGame',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('board', models.CharField(default='         ', max_length=9)),
                ('status', models.CharField(choices=[('pending', 'Pending Acceptance'), ('active', 'Game in Progress'), ('completed', 'Game Completed'), ('cancelled', 'Game Cancelled'), ('timeout', 'Game Timeout')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_move_at', models.DateTimeField(auto_now_add=True)),
                ('allow_spectators', models.BooleanField(default=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_games', to=settings.AUTH_USER_MODEL)),
                ('creator_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_games', to='trueAlign.gameicon')),
                ('current_turn', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_turn', to=settings.AUTH_USER_MODEL)),
                ('opponent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invited_games', to=settings.AUTH_USER_MODEL)),
                ('opponent_icon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opponent_games', to='trueAlign.gameicon')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_games', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_internal', models.BooleanField(default=False, help_text='Internal notes only visible to staff')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='trueAlign.support')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='ticket_attachments/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='trueAlign.support')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATED', 'Created'), ('UPDATED', 'Updated'), ('ASSIGNED', 'Assigned'), ('COMMENTED', 'Commented'), ('REOPENED', 'Reopened'), ('ESCALATED', 'Escalated'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(blank=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_activity', to='trueAlign.support')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Ticket Activities',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='StatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_status', models.CharField(blank=True, max_length=30)),
                ('new_status', models.CharField(choices=[('New', 'New'), ('Open', 'Open'), ('In Progress', 'In Progress'), ('Pending User Response', 'Pending User Response'), ('Pending Third Party', 'Pending Third Party'), ('On Hold', 'On Hold'), ('Resolved', 'Resolved'), ('Closed', 'Closed')], max_length=30)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('changed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_logs', to='trueAlign.support')),
            ],
        ),
        migrations.CreateModel(
            name='ShiftAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_from', models.DateField()),
                ('effective_to', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trueAlign.shiftmaster')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Shift Assignment',
                'verbose_name_plural': 'Shift Assignments',
            },
        ),
        migrations.CreateModel(
            name='RoleAssignmentAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_assigned', models.CharField(max_length=50)),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_assigned_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='upcoming', max_length=20)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trueAlign.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateField(auto_now_add=True)),
                ('hours_worked', models.FloatField(default=0.0)),
                ('role_in_project', models.CharField(choices=[('Manager', 'Manager'), ('Employee', 'Employee'), ('Support', 'Support'), ('Appraisal', 'Appraisal'), ('QC', 'QC')], default='Employee', max_length=50)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trueAlign.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(related_name='projects_assigned', through='trueAlign.ProjectAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Presence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('leave', 'On Leave'), ('wfh', 'Work From Home'), ('business_trip', 'Business Trip')], default='absent', max_length=20)),
                ('marked_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('marked_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='presence_marked', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='presences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='PlayerStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games_played', models.IntegerField(default=0)),
                ('games_won', models.IntegerField(default=0)),
                ('games_lost', models.IntegerField(default=0)),
                ('games_drawn', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_password', models.CharField(max_length=255)),
                ('new_password', models.CharField(max_length=255)),
                ('change_time', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('notification_type', models.CharField(choices=[('game_invite', 'Game Invitation'), ('game_turn', 'Your Turn'), ('game_accepted', 'Game Accepted'), ('game_declined', 'Game Declined'), ('game_over', 'Game Over'), ('game_forfeit', 'Game Forfeit'), ('game_timeout', 'Game Timeout')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='trueAlign.tictactoegame')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_receipts', to='trueAlign.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LeaveRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('half_day', models.BooleanField(default=False)),
                ('leave_days', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Cancelled', 'Cancelled')], default='Pending', max_length=20)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('suggested_dates', models.JSONField(blank=True, null=True)),
                ('documentation', models.FileField(blank=True, null=True, upload_to='leave_docs/')),
                ('is_retroactive', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leave_approvals', to=settings.AUTH_USER_MODEL)),
                ('leave_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trueAlign.leavetype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LeavePolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_policies', to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='LeaveAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annual_days', models.DecimalField(decimal_places=1, max_digits=5)),
                ('carry_forward_limit', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('max_consecutive_days', models.IntegerField(default=0)),
                ('advance_notice_days', models.IntegerField(default=0)),
                ('leave_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trueAlign.leavetype')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='trueAlign.leavepolicy')),
            ],
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Group Admin'), ('member', 'Member')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('typing_status', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='trueAlign.chatgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GlobalUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('released', 'Just Released'), ('scheduled', 'Scheduled')], max_length=20)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('managed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('manage_globalupdate', 'Can manage Global Updates')],
            },
        ),
        migrations.CreateModel(
            name='GameSpectator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spectators', to='trueAlign.tictactoegame')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spectating_games', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FinancialParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, help_text='Unique identifier for the parameter', max_length=100)),
                ('name', models.CharField(help_text='Human-readable name', max_length=255)),
                ('category', models.CharField(choices=[('tax', 'Tax'), ('fee', 'Fee'), ('rate', 'Rate'), ('threshold', 'Threshold'), ('limit', 'Limit'), ('rule', 'Rule'), ('other', 'Other')], default='other', help_text='Category for organizing parameters', max_length=20)),
                ('description', models.TextField(blank=True, help_text="Detailed description of the parameter's purpose", null=True)),
                ('value', models.TextField(help_text='String representation of the parameter value')),
                ('value_type', models.CharField(choices=[('decimal', 'Decimal'), ('percentage', 'Percentage'), ('integer', 'Integer'), ('text', 'Text'), ('json', 'JSON'), ('boolean', 'Boolean'), ('date', 'Date')], help_text='Data type of the parameter', max_length=20)),
                ('is_global', models.BooleanField(default=True, help_text='If True, applies globally; if False, applies to specific entity')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the specific entity', null=True)),
                ('valid_from', models.DateField(help_text='Date from which this parameter value is valid')),
                ('valid_to', models.DateField(blank=True, help_text='Date until which this parameter value is valid (null = indefinite)', null=True)),
                ('fiscal_year', models.CharField(blank=True, help_text='Fiscal year in YYYY-YYYY format', max_length=9, null=True)),
                ('fiscal_quarter', models.CharField(blank=True, help_text='Fiscal quarter in YYYY-Q# format', max_length=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether this parameter has been approved for use')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_fin_parameters', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(blank=True, help_text='Entity type this parameter is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_fin_parameters', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_fin_parameters', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Financial Parameter',
                'verbose_name_plural': 'Financial Parameters',
            },
        ),
        migrations.CreateModel(
            name='FailedLoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_time', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shift', models.CharField(choices=[('Day', 'Day'), ('Night', 'Night')], max_length=10)),
                ('leave_balance', models.IntegerField(default=18)),
                ('attendance_record', models.PositiveIntegerField(default=0)),
                ('late_arrivals', models.PositiveIntegerField(default=0)),
                ('early_departures', models.PositiveIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DailyExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense_id', models.CharField(max_length=50, unique=True)),
                ('date', models.DateField()),
                ('category', models.CharField(choices=[('travel', 'Travel'), ('utility', 'Utility'), ('stationery', 'Stationery'), ('food', 'Food & Beverages'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('paid', 'Paid')], default='draft', max_length=20)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='expenses/')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expenses_approved', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trueAlign.department')),
                ('paid_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='expenses_paid', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CompOffRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worked_date', models.DateField()),
                ('reason', models.TextField()),
                ('hours_worked', models.DecimalField(decimal_places=1, max_digits=4)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comp_off_approvals', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comp_off_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=100)),
                ('contact_info', models.TextField()),
                ('industry_type', models.CharField(max_length=100)),
                ('company_size', models.CharField(choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')], default='Small', max_length=50)),
                ('registration_number', models.CharField(blank=True, max_length=50, null=True)),
                ('business_location', models.CharField(blank=True, max_length=255, null=True)),
                ('website_url', models.URLField(blank=True, null=True)),
                ('year_established', models.IntegerField(blank=True, null=True)),
                ('annual_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ClientParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_participations', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_participations', to='trueAlign.project')),
            ],
        ),
        migrations.CreateModel(
            name='ClientInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=50, unique=True)),
                ('billing_model', models.CharField(choices=[('per_order', 'Per Order'), ('per_fte', 'Per FTE'), ('hybrid', 'Hybrid')], max_length=20)),
                ('billing_cycle_start', models.DateField()),
                ('billing_cycle_end', models.DateField()),
                ('order_count', models.IntegerField(blank=True, null=True)),
                ('fte_count', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=15)),
                ('tax_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('approved', 'Approved'), ('sent', 'Sent to Client'), ('paid', 'Paid'), ('overdue', 'Overdue')], default='draft', max_length=20)),
                ('due_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_invoices', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(limit_choices_to={'groups__name': 'Client'}, on_delete=django.db.models.deletion.PROTECT, related_name='client_invoices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Break',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('break_type', models.CharField(choices=[('Tea Break 1', 'Tea Break 1'), ('Lunch/Dinner Break', 'Lunch/Dinner Break'), ('Tea Break 2', 'Tea Break 2')], max_length=50)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('reason_for_extension', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Break',
                'verbose_name_plural': 'Breaks',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='BankPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=50, unique=True)),
                ('party_name', models.CharField(max_length=255)),
                ('payment_reason', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('payment_date', models.DateField()),
                ('reference_number', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('approved', 'Approved'), ('executed', 'Payment Executed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='bank_payments/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_payments', to=settings.AUTH_USER_MODEL)),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trueAlign.bankaccount')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_payments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('Present', 'Present'), ('Present & Late', 'Present & Late'), ('Absent', 'Absent'), ('Late', 'Late'), ('On Leave', 'On Leave'), ('Work From Home', 'Work From Home'), ('Weekend', 'Weekend'), ('Holiday', 'Holiday'), ('Comp Off', 'Comp Off'), ('Not Marked', 'Not Marked'), ('Yet to Clock In', 'Yet to Clock In')], default='Not Marked', max_length=20)),
                ('leave_type', models.CharField(blank=True, max_length=50, null=True)),
                ('clock_in_time', models.DateTimeField(blank=True, null=True)),
                ('clock_out_time', models.DateTimeField(blank=True, null=True)),
                ('breaks', models.JSONField(default=list)),
                ('total_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_weekend', models.BooleanField(default=False)),
                ('is_holiday', models.BooleanField(default=False)),
                ('holiday_name', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(choices=[('Office', 'Office'), ('Home', 'Home'), ('Remote', 'Remote'), ('Other', 'Other')], default='Office', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('device_info', models.JSONField(blank=True, null=True)),
                ('late_minutes', models.IntegerField(default=0)),
                ('early_departure_minutes', models.IntegerField(default=0)),
                ('left_early', models.BooleanField(default=False)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('regularization_reason', models.TextField(blank=True, null=True)),
                ('regularization_status', models.CharField(blank=True, choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], max_length=20, null=True)),
                ('requested_status', models.CharField(blank=True, choices=[('Present', 'Present'), ('Present & Late', 'Present & Late'), ('Absent', 'Absent'), ('Late', 'Late'), ('On Leave', 'On Leave'), ('Work From Home', 'Work From Home'), ('Weekend', 'Weekend'), ('Holiday', 'Holiday'), ('Comp Off', 'Comp Off'), ('Not Marked', 'Not Marked'), ('Yet to Clock In', 'Yet to Clock In')], help_text='Status requested by employee during regularization', max_length=20, null=True)),
                ('total_sessions', models.IntegerField(default=0)),
                ('idle_time', models.DurationField(default=datetime.timedelta(0))),
                ('overtime_hours', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_overtime_approved', models.BooleanField(default=False)),
                ('original_clock_in_time', models.DateTimeField(blank=True, null=True)),
                ('original_clock_out_time', models.DateTimeField(blank=True, null=True)),
                ('original_status', models.CharField(blank=True, max_length=20, null=True)),
                ('is_employee_notified', models.BooleanField(default=False)),
                ('is_hr_notified', models.BooleanField(default=False)),
                ('regularization_attempts', models.IntegerField(default=0)),
                ('last_regularization_date', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('first_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='first_session_attendance', to='trueAlign.usersession')),
                ('last_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_session_attendance', to='trueAlign.usersession')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attendance_modifications', to=settings.AUTH_USER_MODEL)),
                ('shift', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='trueAlign.shiftmaster')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', 'user'],
            },
        ),
        migrations.CreateModel(
            name='AppraisalWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_status', models.CharField(blank=True, max_length=20, null=True)),
                ('to_status', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('comments', models.TextField(blank=True)),
                ('action_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflow_actions', to=settings.AUTH_USER_MODEL)),
                ('appraisal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_history', to='trueAlign.appraisal')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AppraisalItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('goal', 'Goal'), ('achievement', 'Achievement'), ('improvement', 'Area for Improvement'), ('training', 'Training Completed'), ('feedback', 'Feedback Received')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date', models.DateField(blank=True, null=True)),
                ('employee_rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('manager_rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('manager_comments', models.TextField(blank=True)),
                ('appraisal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='trueAlign.appraisal')),
            ],
        ),
        migrations.CreateModel(
            name='AppraisalAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='appraisal_attachments/%Y/%m/')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('appraisal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='trueAlign.appraisal')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'login_time'], name='trueAlign_u_user_id_81ad70_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_active'], name='trueAlign_u_is_acti_311e90_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userleavebalance',
            unique_together={('user', 'leave_type', 'year')},
        ),
        migrations.AddIndex(
            model_name='userdetails',
            index=models.Index(fields=['employment_status'], name='trueAlign_u_employm_5039f7_idx'),
        ),
        migrations.AddIndex(
            model_name='userdetails',
            index=models.Index(fields=['employee_type'], name='trueAlign_u_employe_bda06a_idx'),
        ),
        migrations.AddIndex(
            model_name='userdetails',
            index=models.Index(fields=['work_location'], name='trueAlign_u_work_lo_30c0c8_idx'),
        ),
        migrations.AddIndex(
            model_name='userdetails',
            index=models.Index(fields=['hire_date'], name='trueAlign_u_hire_da_98da4c_idx'),
        ),
        migrations.AddIndex(
            model_name='userdetails',
            index=models.Index(fields=['start_date'], name='trueAlign_u_start_d_f34b79_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='timesheet',
            unique_together={('user', 'week_start_date', 'project', 'task_name', 'version')},
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['ticket_id'], name='trueAlign_s_ticket__676519_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['status'], name='trueAlign_s_status_69e152_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['created_at'], name='trueAlign_s_created_577e4c_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['user'], name='trueAlign_s_user_id_6fec4b_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['due_date'], name='trueAlign_s_due_dat_c6bcc3_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['resolved_at'], name='trueAlign_s_resolve_70ea27_idx'),
        ),
        migrations.AddIndex(
            model_name='support',
            index=models.Index(fields=['priority'], name='trueAlign_s_priorit_933347_idx'),
        ),
        migrations.AddIndex(
            model_name='shiftassignment',
            index=models.Index(fields=['user', 'effective_from'], name='trueAlign_s_user_id_f0dd6b_idx'),
        ),
        migrations.AddIndex(
            model_name='shiftassignment',
            index=models.Index(fields=['is_current'], name='trueAlign_s_is_curr_9ea5e0_idx'),
        ),
        migrations.AddConstraint(
            model_name='presence',
            constraint=models.UniqueConstraint(fields=('user', 'date'), name='unique_presence_per_user_per_day'),
        ),
        migrations.AddIndex(
            model_name='messageread',
            index=models.Index(fields=['user', 'read_at'], name='trueAlign_m_user_id_339db3_idx'),
        ),
        migrations.AddIndex(
            model_name='messageread',
            index=models.Index(fields=['message', 'user'], name='trueAlign_m_message_bf6b93_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='messageread',
            unique_together={('message', 'user')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['group', 'sent_at'], name='trueAlign_m_group_i_fbe0af_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['direct_message', 'sent_at'], name='trueAlign_m_direct__968179_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender', 'sent_at'], name='trueAlign_m_sender__4a2cd7_idx'),
        ),
        migrations.AddIndex(
            model_name='leaverequest',
            index=models.Index(fields=['user', 'start_date', 'status'], name='trueAlign_l_user_id_e2aa7e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaveallocation',
            unique_together={('policy', 'leave_type')},
        ),
        migrations.AlterUniqueTogether(
            name='groupmember',
            unique_together={('group', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='gamespectator',
            unique_together={('game', 'user')},
        ),
        migrations.AddIndex(
            model_name='financialparameter',
            index=models.Index(fields=['key'], name='fin_param_key_idx'),
        ),
        migrations.AddIndex(
            model_name='financialparameter',
            index=models.Index(fields=['category'], name='fin_param_cat_idx'),
        ),
        migrations.AddIndex(
            model_name='financialparameter',
            index=models.Index(fields=['content_type', 'object_id'], name='fin_param_entity_idx'),
        ),
        migrations.AddIndex(
            model_name='financialparameter',
            index=models.Index(fields=['valid_from', 'valid_to'], name='fin_param_validity_idx'),
        ),
        migrations.AddIndex(
            model_name='financialparameter',
            index=models.Index(fields=['fiscal_year'], name='fin_param_fiscal_yr_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='financialparameter',
            unique_together={('key', 'content_type', 'object_id', 'valid_from')},
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['user', 'date'], name='trueAlign_a_user_id_96129d_idx'),
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['date', 'status'], name='trueAlign_a_date_2bbee0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('user', 'date')},
        ),
    ]
